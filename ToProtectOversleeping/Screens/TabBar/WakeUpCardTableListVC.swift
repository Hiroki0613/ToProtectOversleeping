//
//  WakeUpCardTableListVC.swift
//  ToProtectOversleeping
//
//  Created by ËøëËó§ÂÆèËºù on 2021/05/12.
//

import UIKit
import Firebase

//protocol SendWakeUpReportToChatDelegate {
//    func sendWakeUpReport()
//}

class WakeUpCardTableListVC: UIViewController {
    
    let tableView = UITableView()
//    var wakeUpCardTableListCell = WakeUpCardTableListCell()
//    var settingLists: [SettingList] = []
//    var chatRoomNameModel:ChatRoomNameModel?
    var userDataModel: UserDataModel?
    var chatRoomNameModelArray = [ChatRoomNameModel]()
    var chatRoomDocumentIdArray = [String]()
    
//    var sendWakeUpReportToChatDelegate: SendWakeUpReportToChatDelegate?
        
    var indexNumber = 0
    
    // Êñ∞„Åó„ÅÑ„Ç´„Éº„Éâ„ÇíËøΩÂä†
    var addWakeUpCardButton = WUButton(backgroundColor: .systemOrange, sfSymbolString: "macwindow.badge.plus")
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
//        NotificationCenter.default.addObserver(
//                    self,
//                    selector: #selector(viewWillEnterForeground(_:)),
//                    name: UIApplication.willEnterForegroundNotification,
//                    object: nil)
//
//                NotificationCenter.default.addObserver(
//                    self,
//                    selector: #selector(viewDidEnterBackground(_:)),
//                    name: UIApplication.didEnterBackgroundNotification,
//                    object: nil)
//
//
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // ÁÑ°ÁêÜÁü¢ÁêÜ„É≠„Ç∞„Ç§„É≥„Åó„Å¶„ÅÑ„Åæ„Åô
        Auth.auth().signInAnonymously { result, error in
            guard let _ = error else { return }
        }
        
        
        self.tabBarController?.tabBar.isHidden = false
        navigationController?.setNavigationBarHidden(true, animated: true)
        
        // UserDefault„ÅÆÂÄ§„ÅßÊúÄÂàù„ÅÆÁîªÈù¢„ÇíÂàÜÂ≤ê„Åï„Åõ„Çã
        if UserDefaults.standard.bool(forKey: "isFirstOpenApp") == false {
            configureTableView()
            configureAddCardButton()
            
            let loadDBModel = LoadDBModel()
            
            // „ÉÅ„É£„ÉÉ„Éà„É´„Éº„É†„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
            loadDBModel.getChatRoomNameDelegate = self
            loadDBModel.loadChatRoomNameData()

            loadDBModel.getUserDataDelegate = self
            loadDBModel.loadProfileData()
            
           getPermissionLocalPushNotification()
            
        } else {
            let newRegistrationUserNameVC = NewRegistrationUserNameVC()
            navigationController?.pushViewController(newRegistrationUserNameVC, animated: true)
        }
        
        
    }
    
    func getPermissionLocalPushNotification() {

        // „Ç¢„Éó„É™„ÅÆÈÄöÁü•„ÇíË®±ÂèØ
        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .badge, .sound]) { granted, error in
            if granted {
                print("„É≠„Éº„Ç´„É´ÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Åæ„Åó„Åü")
                let center = UNUserNotificationCenter.current()
                center.delegate = self
            } else {
                print("„É≠„Éº„Ç´„É´ÈÄöÁü•„ÅåË®±ÂèØ„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü")
            }
        }

//        // „Ç¢„Éó„É™„ÅÆ„É≠„Éº„Ç´„É´ÈÄöÁü•ÂÜÖÂÆπ
//        let content: UNMutableNotificationContent = UNMutableNotificationContent()
//        content.title = "WakeUp!"
//        content.body = "„ÉÅ„É£„ÉÉ„Éà„Å´ÊäïÁ®ø„Åó„Å¶„Åä„Åç„Åæ„Åó„ÅüüòÅ"
//
//        // ÊØéÊó•Ê≠£Âçà„Å´„Ç¢„É©„Éº„É†„ÇíÈÄöÁü•„Åô„Çã
//        var notificationTime = DateComponents()
//        notificationTime.hour = 23
//        notificationTime.minute = 17
//        let trigger = UNCalendarNotificationTrigger(dateMatching: notificationTime, repeats: true)
//        let request = UNNotificationRequest(identifier: UUID().uuidString, content: content, trigger: trigger)
//
//        UNUserNotificationCenter.current().add(request) { error in
//            if let error = error {
//                print(error.localizedDescription)
//            } else {
//                print("„É≠„Éº„Ç´„É´ÈÄöÁü•ÊàêÂäü")
//            }
//        }

    }
    
    func configureTableView() {
//        let tableView = UITableView(frame: view.frame)
//        let tableView = UITableView(frame: CGRect(x: 20, y: 0, width: view.frame.size.width - 40, height: view.frame.size.height))
//        let tableView = UITableView(frame: view.bounds)
        view.addSubview(tableView)
//        tableView.backgroundColor = .systemOrange
        tableView.frame = view.bounds
//        tableView.rowHeight = 400
        tableView.delegate = self
        tableView.dataSource = self
//        tableView.allowsSelection = false
//        tableView.delaysContentTouches = false
        tableView.separatorStyle = .none
        
        tableView.register(WakeUpCardTableListCell.self, forCellReuseIdentifier: WakeUpCardTableListCell.reuseID)
        
    }
    
    func configureAddCardButton() {
        addWakeUpCardButton.translatesAutoresizingMaskIntoConstraints = false
        addWakeUpCardButton.layer.cornerRadius = 40
        addWakeUpCardButton.layer.borderColor = UIColor.systemBackground.cgColor
        addWakeUpCardButton.layer.borderWidth = 3.0
        addWakeUpCardButton.addTarget(self, action: #selector(goToWakeUpDetailCardVC), for: .touchUpInside)
        view.addSubview(addWakeUpCardButton)
        
        NSLayoutConstraint.activate([
            addWakeUpCardButton.widthAnchor.constraint(equalToConstant: 80),
            addWakeUpCardButton.heightAnchor.constraint(equalToConstant: 80),
            addWakeUpCardButton.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -30),
            addWakeUpCardButton.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -30)
        ])
        addWakeUpCardButton.tintColor = .systemBackground
    }
    
    
    @objc func goToWakeUpDetailCardVC() {
        let setAlarmTimeAndNewRegistrationVC = SetAlarmTimeAndNewRegistrationVC()
        setAlarmTimeAndNewRegistrationVC.modalPresentationStyle = .overFullScreen
        setAlarmTimeAndNewRegistrationVC.modalTransitionStyle = .crossDissolve
        self.present(setAlarmTimeAndNewRegistrationVC, animated: true, completion: nil)
    }
}

extension WakeUpCardTableListVC: UITableViewDelegate {
//    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        print("„Çø„ÉÉ„Éó„Åï„Çå„Åæ„Åó„Åü: ", indexPath.row)
//    }
    
    func tableView(_ tableView: UITableView, shouldHighlightRowAt indexPath: IndexPath) -> Bool {
        return false
    }
    
    func tableView(_ tableView: UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: IndexPath) -> UISwipeActionsConfiguration? {
        // Á∑®ÈõÜÂá¶ÁêÜ
        let editAction = UIContextualAction(style: .normal, title: "Edit") { (action, view, completionHandler) in
            // Á∑®ÈõÜÂá¶ÁêÜ„ÇíË®òËø∞
            print("Edit„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åü")
            let wakeUpQrCodeVC = WakeUpQrCodeMakerVC()
            wakeUpQrCodeVC.invitedDocumentId = self.chatRoomDocumentIdArray[indexPath.row]
            
            self.navigationController?.pushViewController(wakeUpQrCodeVC, animated: true)
            
            // ÂÆüË°åÁµêÊûú„Å´Èñ¢„Çè„Çâ„ÅöË®òËø∞
            completionHandler(true)
        }

           // ÂâäÈô§Âá¶ÁêÜ
            let deleteAction = UIContextualAction(style: .destructive, title: "Delete") { (action, view, completionHandler) in
              //ÂâäÈô§Âá¶ÁêÜ„ÇíË®òËø∞
              print("Delete„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åü")

              // ÂÆüË°åÁµêÊûú„Å´Èñ¢„Çè„Çâ„ÅöË®òËø∞
              completionHandler(true)
            }

            // ÂÆöÁæ©„Åó„Åü„Ç¢„ÇØ„Ç∑„Éß„É≥„Çí„Çª„ÉÉ„Éà
            return UISwipeActionsConfiguration(actions: [deleteAction, editAction])
    }
}

extension WakeUpCardTableListVC: UITableViewDataSource {
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.chatRoomNameModelArray.count
    }
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: WakeUpCardTableListCell.reuseID) as! WakeUpCardTableListCell
        cell.wakeUpSetAlarmSwitch.addTarget(self, action: #selector(tapWakeUpSetAlarmSwitch), for: .touchUpInside)
        cell.wakeUpSetAlarmSwitch.tag = indexPath.row
        cell.setAlarmButton.addTarget(self, action: #selector(tapSetAlarmButton(_:)), for: .touchUpInside)
        cell.setAlarmButton.tag = indexPath.row
        cell.setChatButton.addTarget(self, action: #selector(tapSetChatButton(_:)), for: .touchUpInside)
        cell.setChatButton.tag = indexPath.row
        cell.set(chatRoomNameModel: self.chatRoomNameModelArray[indexPath.row])
        
//        indexNumber = indexPath.row
//        print("tableview„ÉÅ„É£„ÉÉ„Éà„Éú„Çø„É≥_cellForRowAt: ", indexPath.row)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 300
    }
    
//    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
//        return 20
//    }
//
//    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
//        return 20
//    }
//
//    func tableView(_ tableView: UITableView, willDisplayHeaderView view: UIView, forSection section: Int) {
//        view.tintColor = .blue
//    }
//
//    func tableView(_ tableView: UITableView, willDisplayFooterView view: UIView, forSection section: Int) {
//        view.tintColor = .red
//    }
    
}


// WakeUpCardTableListCell„ÅÆ„Éú„Çø„É≥Èñ¢‰øÇ
extension WakeUpCardTableListVC {
//    @objc func tapChatTeamInvitationButton(_ sender: UIButton) {
//        print("tableviewÊãõÂæÖ„Åô„Çã„Éú„Çø„É≥„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åæ„Åó„Åü: ", sender.tag)
//        let wakeUpQrCodeVC = WakeUpQrCodeMakerVC()
//        navigationController?.pushViewController(wakeUpQrCodeVC, animated: true)
//    }
    
    @objc func tapWakeUpSetAlarmSwitch(_ sender: UISwitch) {
        let onCheck: Bool = sender.isOn
        let messageModel = MessageModel()

        
        //chatRoomID„ÅåÂøÖË¶Å
        let chatRoomDocumentIdForSwitch = chatRoomDocumentIdArray[sender.tag]
        print("chatRoomDocumentIdForSwitch: ", chatRoomDocumentIdForSwitch)
        
        let sendDBModel = SendDBModel()
        sendDBModel.switchedChatRoomWakeUpAlarm(roomNameId: chatRoomDocumentIdForSwitch, isWakeUpBool: onCheck)
        
        
        if onCheck {
            print("„Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÁä∂ÊÖã„ÅØ„Ç™„É≥„Åß„Åô„ÄÇÂÄ§: \(onCheck),sender\(sender.tag)")
            // „Åì„Åì„Åßon„Å´„Åô„Çã„Å®„ÄÅÁõÆË¶ö„Åæ„Åó„Çª„ÉÉ„Éà
            alarmSet(identifierString: chatRoomDocumentIdForSwitch)
            
            // „Ç¢„É©„Éº„É†„Çí„Çª„ÉÉ„Éà„Åó„Åü„Åì„Å®„ÇíÊäïÁ®ø
            messageModel.sendMessageToChatDeclarationWakeUpEarly(documentID: chatRoomDocumentIdForSwitch, displayName: self.userDataModel!.name)
            
        } else {
            print("„Çπ„Ç§„ÉÉ„ÉÅ„ÅÆÁä∂ÊÖã„ÅØ„Ç™„Éï„Åß„Åô„ÄÇÂÄ§: \(onCheck),sender\(sender.tag)")
            // „Åì„Åì„Åßoff„Å´„Åô„Çã„Å®„ÄÅÁõÆË¶ö„Åæ„ÅóËß£Èô§
            clearAlarm(identifiers: chatRoomDocumentIdForSwitch)
            messageModel.sendMessageToChatAlarmCut(documentID: chatRoomDocumentIdForSwitch, displayName: self.userDataModel!.name)
        }
    }
    
    
    
    
    
    @objc func tapSetAlarmButton(_ sender: UIButton) {
        print("tableview„Ç¢„É©„Éº„É†„Éú„Çø„É≥„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åæ„Åó„Åü: ",sender.tag)
        let wakeUpAndCutAlertBySlideVC = WakeUpAndCutAlertBySlideVC()
        wakeUpAndCutAlertBySlideVC.mySettingAlarmTime = Date(timeIntervalSince1970: self.chatRoomNameModelArray[sender.tag].wakeUpTimeDate)
        wakeUpAndCutAlertBySlideVC.authId = Auth.auth().currentUser!.uid
        wakeUpAndCutAlertBySlideVC.chatRoomDocumentId = chatRoomDocumentIdArray[sender.tag]
        print(self.chatRoomNameModelArray[sender.tag].wakeUpTimeDate)
        navigationController?.pushViewController(wakeUpAndCutAlertBySlideVC, animated: true)
    }
    
    @objc func tapSetChatButton(_ sender: UIButton) {
        print("tableview„ÉÅ„É£„ÉÉ„Éà„Éú„Çø„É≥„Åå„Çø„ÉÉ„Éó„Åï„Çå„Åæ„Åó„Åü: ", sender.tag)
        print("tableview„ÉÅ„É£„ÉÉ„Éà„Éú„Çø„É≥ sender.tag: ", sender.tag)
        print("tableview„ÉÅ„É£„ÉÉ„Éà„Éú„Çø„É≥ indexNumber: ", indexNumber)
        
//        indexNumber = sender.tag
        
        let wakeUpCommunicateChatVC = WakeUpCommunicateChatVC()
        wakeUpCommunicateChatVC.chatRoomNameModel = self.chatRoomNameModelArray[sender.tag]
//        wakeUpCommunicateChatVC.chatRoomNameModel = self.chatRoomNameModelArray[indexNumber]
        wakeUpCommunicateChatVC.userDataModel = self.userDataModel
        wakeUpCommunicateChatVC.chatRoomDocumentId = self.chatRoomDocumentIdArray[sender.tag]
//        wakeUpCommunicateChatVC.chatRoomDocumentId = self.chatRoomDocumentIdArray[indexNumber]
        wakeUpCommunicateChatVC.chatTableViewIndexPath = sender.tag
//        wakeUpCommunicateChatVC.chatTableViewIndexPath = indexNumber
        navigationController?.pushViewController(wakeUpCommunicateChatVC, animated: true)
    }
}

// ÁõÆË¶ö„Åæ„ÅóÊôÇË®à„ÅÆfunc
extension WakeUpCardTableListVC {
    //„Ç¢„É©„Éº„ÉàË®≠ÂÆö
    func alarmSet(identifierString: String){
        // identifier„ÅØ‰∏Ä‰Ωç„Å´„Åô„Çã„Åü„ÇÅ„ÄÅAuth.auth()+roomId„Å´„Åô„Çã
        let identifier = Auth.auth().currentUser!.uid + identifierString
        removeAlarm(identifiers: identifier)

        //ÈÄöÁü•Ë®≠ÂÆö
        let content = UNMutableNotificationContent()
        content.title = "ÈÄöÁü•„Åß„Åô"
        
        content.categoryIdentifier = identifier
        var dateComponents = DateComponents()
        
        //ËøëËó§„ÄÄ„Ç´„É¨„É≥„ÉÄ„ÉºÂΩ¢Âºè„ÅßÈÄöÁü•
        dateComponents.hour = 1
        dateComponents.minute = 33
        let trigger = UNCalendarNotificationTrigger(dateMatching: dateComponents, repeats: true)
        //TODO: identifier„ÅØ‰∏Ä‰Ωç„Å´„Åô„Çã„Åü„ÇÅ„ÄÅAuth.auth()+roomId„Å´„Åô„Çã„ÄÇ
        let request = UNNotificationRequest(identifier: identifier, content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request) { (error) in
            if let error = error {
                print(error.localizedDescription)
            }
        }
    }
    
    
    
    //„Ç¢„É©„Éº„ÉàË®≠ÂÆöÂâäÈô§
    func removeAlarm(identifiers:String){
        UNUserNotificationCenter.current().removePendingNotificationRequests(withIdentifiers: [identifiers])
    }
   
    
    func clearAlarm(identifiers: String){
        let identifier = Auth.auth().currentUser!.uid + identifiers
        let center = UNUserNotificationCenter.current()
        center.removePendingNotificationRequests(withIdentifiers: [identifier])
    }
}

// „ÉÅ„É£„ÉÉ„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åó„Å¶„ÄÅtableView„ÇíreloadData
extension WakeUpCardTableListVC: GetChatRoomNameDelegate {
    func getChatRoomName(chatRoomNameModel: [ChatRoomNameModel]) {
        self.chatRoomNameModelArray = chatRoomNameModel
        tableView.reloadData()
    }
    
    func getChatDocumentId(chatRoomDocumentId: [String]) {
        self.chatRoomDocumentIdArray = chatRoomDocumentId
    }
}

// „Éó„É≠„Éï„Ç£„Éº„É´ÊÉÖÂ†±„ÇíÂèñÂæó
extension WakeUpCardTableListVC: GetUserDataDelegate {
    func getUserData(userDataModel: UserDataModel) {
        self.userDataModel = userDataModel
    }
}

extension WakeUpCardTableListVC: UNUserNotificationCenterDelegate {
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, willPresent notification: UNNotification, withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void) {
        
        //TODO: „Åì„Åì„Å´„ÉÅ„É£„ÉÉ„Éà„ÅÆÊäïÁ®øÊñá„ÇíÊõ∏„Åè
        let messageModel = MessageModel()
        messageModel.sendMessageToChatWakeUpLate(documentID: self.chatRoomDocumentIdArray[indexNumber], displayName: self.userDataModel!.name)
//        self.sendWakeUpReportToChatDelegate?.sendWakeUpReport()
        completionHandler([.banner, .list])
    }
    
    func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {
        print("„Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„ÉâÂá¶ÁêÜ")
        completionHandler()
    }
    
    
}
